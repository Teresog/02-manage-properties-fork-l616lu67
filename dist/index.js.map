{"version":3,"sources":["src/index.js"],"names":["LitElement","html","ManageProperties","properties","message","type","String","count","Number","constructor","render","reverseMessage","split","reverse","join","customElements","define"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,QAAiC,KAAjC;;AAEA,MAAMC,gBAAN,SAA+BF,UAA/B,CAA0C;AACxC;AACA;AAEA;AACA;AACA;AACqB,aAAVG,UAAU,GAAG;AACtB,WAAO;AACLC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEC;AAAR,OADJ;AAELC,MAAAA,KAAK,EAAE;AAAEF,QAAAA,IAAI,EAAEG;AAAR;AAFF,KAAP;AAID;;AAEDC,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;;AACA,SAAKF,KAAL,GAAa,CAAb;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,WAAOT,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAKG,OAAQ,eAAc,KAAKG,KAAM;AAClE;AACA;AACA;AACA;AACA,qCAAqC,KAAKI,cAAL,CAAoB,KAAKP,OAAzB,CAAkC;AACvE;AACA;AACA,KAlBI;AAmBD;;AAEDO,EAAAA,cAAc,CAACP,OAAD,EAAU;AACtB,WAAOA,OAAO,CACXQ,KADI,CACE,EADF,EAEJC,OAFI,GAGJC,IAHI,CAGC,EAHD,CAAP;AAID;;AAhDuC;;AAmD1CC,cAAc,CAACC,MAAf,CAAsB,mBAAtB,EAA2Cd,gBAA3C","sourceRoot":"/source_map/","sourcesContent":["import { LitElement, html } from \"lit\";\n\nclass ManageProperties extends LitElement {\n  // Properties are defined through a static getter. When defined, LitElement will decode any\n  // html attributes set on this component as properties which can be used from javascript.\n\n  // Keys should be the property name, value the property type.\n  // The type is used to deserialize html attribute string into a javascript property.\n  // The supported types are String, Number, Boolean, Array Object.\n  static get properties() {\n    return {\n      message: { type: String },\n      count: { type: Number }\n    };\n  }\n\n  constructor() {\n    super();\n\n    // default values can be set from the constructor\n    this.count = 0;\n  }\n\n  render() {\n    return html`\n      <div>\n        <!--\n          Dynamic parts of your template are set through template string expressions.\n          It's plain javascript, so you can use any valid javascript expression. lit-html handles\n          updating the dom efficiently.\n        -->\n\n        <!-- Render a string or number directly -->\n        <div>\n          The message is: ${this.message}, count is: ${this.count}\n        </div>\n\n        <!-- Call a function and render the return value -->\n        <div>\n          The reversed message is: ${this.reverseMessage(this.message)}\n        </div>\n      </div>\n    `;\n  }\n\n  reverseMessage(message) {\n    return message\n      .split(\"\")\n      .reverse()\n      .join(\"\");\n  }\n}\n\ncustomElements.define(\"manage-properties\", ManageProperties);\n"]}